{"ast":null,"code":"var _jsxFileName = \"/Users/barbaramoahamed/Downloads/Globe-main/src/Marks.js\",\n    _s4 = $RefreshSig$();\n\nimport { geoOrthographic, geoPath, geoGraticule, append, count } from \"d3\";\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport $, { data } from \"jquery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Marks = _ref => {\n  _s4();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$();\n\n  let {\n    data: {\n      land,\n      geometry\n    }\n  } = _ref;\n\n  const Counter = () => {\n    _s();\n\n    const [count, setCount] = React.useState(0);\n    useAnimationFrame(deltaTime => {\n      // Pass on a function to the setter of the state\n      // to make sure we always have the latest state\n      setCount(prevCount => (prevCount + deltaTime * 0.01) % 100);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Math.round(count)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(Counter, \"oaakgslE/PS5V9jloHSFhr3VWeo=\", false, function () {\n    return [useAnimationFrame];\n  });\n\n  const width = 500;\n  const height = 500; // const intialMousePosition = { x: width / 2, y: height / 2 };\n\n  const rotate = [0, -23.5];\n  const velocity = [0.015, -0];\n  const [dt, setDT] = useState(Date.now());\n  const projection = geoOrthographic().scale(200).clipAngle(90);\n  ;\n  const path = geoPath(projection);\n  const graticule = geoGraticule();\n  const time = Date.now();\n  const [rotation, setRotation] = useState({\n    rotation: 0\n  });\n  const savedCallback = useRef();\n  const [counter, setCounter] = useState(0);\n\n  function useInterval(callback, delay) {\n    _s2();\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]); // Set up the interval.\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n  }\n\n  _s2(useInterval, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n  ;\n  useInterval(() => {\n    setCounter(counter + 0.9);\n  }, 1000);\n  console.log(\"counter\", counter);\n\n  const useAnimationFrame = callback => {\n    _s3();\n\n    // Use useRef for mutable variables that we want to persist\n    // without triggering a re-render on their change\n    const requestRef = React.useRef();\n    const previousTimeRef = React.useRef();\n\n    const animate = time => {\n      if (previousTimeRef.current != undefined) {\n        const deltaTime = time - previousTimeRef.current;\n        callback(deltaTime);\n      }\n\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animate);\n    };\n\n    useEffect(() => {\n      requestRef.current = requestAnimationFrame(animate);\n      return () => cancelAnimationFrame(requestRef.current);\n    }, []); // Make sure the effect runs only once\n  };\n\n  _s3(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"marks\",\n      children: [projection.rotate([-count, rotate[1]]), /*#__PURE__*/_jsxDEV(\"path\", {\n        className: \"sphere\",\n        d: path({\n          type: \"Sphere\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n        className: \"graticule\",\n        d: path(graticule()),\n        style: {\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this), land.features.map((feature, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n        className: \"feature\",\n        d: path(feature)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)), geometry.features.map((feature, i) => {\n        var _path$centroid$;\n\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            className: \"interiors\",\n            d: path(feature),\n            id: feature.properties.name\n          }, feature.properties.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this), (_path$centroid$ = path.centroid(feature)[0]) !== null && _path$centroid$ !== void 0 ? _path$centroid$ : /*#__PURE__*/_jsxDEV(\"circle\", {\n            className: \"interiors\",\n            cx: path.centroid(feature)[0],\n            cy: path.centroid(feature)[1],\n            r: \"2\",\n            fill: \"red\",\n            fontSize: \"36\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s4(Marks, \"X97fH3zJF2AWhbMSnjVEkr/rAkA=\", true);\n\n_c = Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["geoOrthographic","geoPath","geoGraticule","append","count","React","useState","useCallback","useEffect","useRef","$","data","Marks","land","geometry","Counter","setCount","useAnimationFrame","deltaTime","prevCount","Math","round","width","height","rotate","velocity","dt","setDT","Date","now","projection","scale","clipAngle","path","graticule","time","rotation","setRotation","savedCallback","counter","setCounter","useInterval","callback","delay","current","id","setInterval","clearInterval","console","log","requestRef","previousTimeRef","animate","undefined","requestAnimationFrame","cancelAnimationFrame","type","display","features","map","feature","i","properties","name","centroid"],"sources":["/Users/barbaramoahamed/Downloads/Globe-main/src/Marks.js"],"sourcesContent":["import { geoOrthographic, geoPath, geoGraticule, append, count } from \"d3\";\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport $, { data } from \"jquery\";\n\n\nexport const Marks = ({ data: { land, geometry } }) => {\n\n  const Counter = () => {\n    const [count, setCount] = React.useState(0)\n    \n    useAnimationFrame(deltaTime => {\n      // Pass on a function to the setter of the state\n      // to make sure we always have the latest state\n      setCount(prevCount => (prevCount + deltaTime * 0.01) % 100)\n    })\n      \n    return <div>{Math.round(count)}</div>\n  }\n\n\n\n  const width = 500;\n  const height = 500;\n  // const intialMousePosition = { x: width / 2, y: height / 2 };\n  const rotate = [0, -23.5];\n  const velocity = [0.015, -0];\n  const [dt, setDT] = useState(Date.now());\n\n \n\n  const projection = geoOrthographic()\n    .scale(200).clipAngle(90);;\n  const path = geoPath(projection);\n  const graticule = geoGraticule();\n\n  const time = Date.now();\n\n  const [rotation, setRotation] = useState({rotation:0});\n  const savedCallback = useRef();\n\n\n  const [counter, setCounter] = useState(0);\n\n  function useInterval(callback, delay) {\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n    \n    // Set up the interval.\n    useEffect(() => {\n      let id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n    \n  };\n\n\n\n\n \n \n\n \n  useInterval(() => {\n    setCounter(counter + 0.9);\n  }, 1000);\n\n  console.log(\"counter\", counter);\n\n \n\n\n\n  const useAnimationFrame = callback => {\n    // Use useRef for mutable variables that we want to persist\n    // without triggering a re-render on their change\n    const requestRef = React.useRef();\n    const previousTimeRef = React.useRef();\n    \n    const animate = time => {\n      if (previousTimeRef.current != undefined) {\n        const deltaTime = time - previousTimeRef.current;\n        callback(deltaTime)\n      }\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animate);\n    }\n    \n     useEffect(() => {\n      requestRef.current = requestAnimationFrame(animate);\n      return () => cancelAnimationFrame(requestRef.current);\n    }, []); // Make sure the effect runs only once\n  }\n  \n\n\n  return (\n\n    <>\n        <Counter></Counter>\n        <g\n      className=\"marks\"\n \n    >\n      {projection\n    .rotate([-count, rotate[1] ])}\n      <path className=\"sphere\" d={path({ type: \"Sphere\" })} />\n      <path\n        className=\"graticule\"\n        d={path(graticule())}\n        style={{ display: \"none\" }}\n      />\n\n      {land.features.map((feature, i) => (\n        <path className=\"feature\" d={path(feature)} key={i} />\n      ))}\n\n      {geometry.features.map((feature, i) => (\n        <g>\n          <path\n            className=\"interiors\"\n            d={path(feature)}\n            key={feature.properties.name}\n            id={feature.properties.name}\n          >\n           </path>\n\n          {path.centroid(feature)[0] ?? (\n            <circle\n              className=\"interiors\"\n              key={i}\n              cx={path.centroid(feature)[0]}\n              cy={path.centroid(feature)[1]}\n              r=\"2\"\n              fill=\"red\"\n              fontSize=\"36\"\n            ></circle>\n          )}\n        </g>\n      ))}\n    </g>\n    </>\n\n\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}