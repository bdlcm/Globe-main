{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\nimport { feature, mesh } from \"topojson-client\";\nimport electricityData from \"./mapData.json\";\nconst jsonUrl = \"https://raw.githubusercontent.com/bdlcm/D3/master/WORLD_ATLAS_2.0%20Electric%20power%20consumption%20(kWh%20per%20capita)%20(1).json\";\nexport const useData = () => {\n  _s();\n\n  // json(mapData, function(data) { console.log(\"mapData\", data); });\n  console.log(\"electricityData\", electricityData);\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    json(jsonUrl).then(topojsonData => {\n      const {\n        countries,\n        land\n      } = topojsonData.objects;\n      setData({\n        land: feature(topojsonData, land),\n        interiors: mesh(topojsonData, countries, (a, b) => a !== b),\n        geometry: feature(topojsonData, topojsonData.objects.countries)\n      });\n    });\n  }, []);\n  return data;\n};\n\n_s(useData, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");","map":{"version":3,"names":["useState","useEffect","json","feature","mesh","electricityData","jsonUrl","useData","console","log","data","setData","then","topojsonData","countries","land","objects","interiors","a","b","geometry"],"sources":["/Users/barbaramoahamed/Documents/repos/Globe-main/src/useData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\nimport { feature, mesh } from \"topojson-client\";\n\nimport electricityData from \"./mapData.json\";\nconst jsonUrl = \"https://raw.githubusercontent.com/bdlcm/D3/master/WORLD_ATLAS_2.0%20Electric%20power%20consumption%20(kWh%20per%20capita)%20(1).json\";\n\nexport const useData = () => {\n  // json(mapData, function(data) { console.log(\"mapData\", data); });\n  console.log(\"electricityData\", electricityData);\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then((topojsonData) => {\n      const { countries, land } = topojsonData.objects;\n\n      setData({\n        land: feature(topojsonData, land),\n        interiors: mesh(topojsonData, countries, (a, b) => a !== b),\n        geometry: feature(topojsonData, topojsonData.objects.countries),\n      });\n    });\n  }, []);\n\n  return data;\n};\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,iBAA9B;AAEA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,MAAMC,OAAO,GAAG,sIAAhB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAC3B;EACAC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,eAA/B;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;EAEAC,SAAS,CAAC,MAAM;IACdC,IAAI,CAACI,OAAD,CAAJ,CAAcM,IAAd,CAAoBC,YAAD,IAAkB;MACnC,MAAM;QAAEC,SAAF;QAAaC;MAAb,IAAsBF,YAAY,CAACG,OAAzC;MAEAL,OAAO,CAAC;QACNI,IAAI,EAAEZ,OAAO,CAACU,YAAD,EAAeE,IAAf,CADP;QAENE,SAAS,EAAEb,IAAI,CAACS,YAAD,EAAeC,SAAf,EAA0B,CAACI,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CAA1C,CAFT;QAGNC,QAAQ,EAAEjB,OAAO,CAACU,YAAD,EAAeA,YAAY,CAACG,OAAb,CAAqBF,SAApC;MAHX,CAAD,CAAP;IAKD,CARD;EASD,CAVQ,EAUN,EAVM,CAAT;EAYA,OAAOJ,IAAP;AACD,CAlBM;;GAAMH,O"},"metadata":{},"sourceType":"module"}