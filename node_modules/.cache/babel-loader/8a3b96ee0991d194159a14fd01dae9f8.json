{"ast":null,"code":"var _jsxFileName = \"/Users/barbaramoahamed/Downloads/Globe-main/src/Marks.js\",\n    _s = $RefreshSig$();\n\nimport { geoOrthographic, geoPath, geoGraticule, timer } from \"d3\";\nimport React, { useState, useMemo, useEffect, useRef } from \"react\";\nimport $, { data } from \"jquery\";\nimport { Counter } from \"./hooks/animation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Marks = _ref => {\n  _s();\n\n  let {\n    data: {\n      land,\n      geometry\n    }\n  } = _ref;\n  const width = 500;\n  const height = 500; // const intialMousePosition = { x: width / 2, y: height / 2 };\n\n  const rotate = [0, -23.5];\n  const velocity = [0.015, -0]; // const [dt, setDT] = useState(Date.now());\n\n  const [rotation, setRotation] = useState(0);\n  const savedCallback = useRef();\n  const count = Counter();\n  const projection = useMemo(() => {\n    return geoOrthographic().scale(300);\n  }, []);\n  const path = geoPath(projection);\n  const graticule = geoGraticule(); // function useInterval(callback, delay) {\n  //   useEffect(() => {\n  //     savedCallback.current = callback;\n  //   }, [callback]);\n  //   // Set up the interval.\n  //   useEffect(() => {\n  //     let id = setInterval(() => {\n  //       savedCallback.current();\n  //     }, delay);\n  //     return () => clearInterval(id);\n  //   }, [delay]);\n  // };\n  // useInterval(() => {\n  //   setRotation(rotation + 0.2);\n  //   console.log(\"interval\", rotation)\n  // }, 200);\n  // const useAnimationFrame = callback => {\n  //   // Use useRef for mutable variables that we want to persist\n  //   // without triggering a re-render on their change\n  //   const requestRef = useRef();\n  //   const previousTimeRef =  useRef();\n  //   const animate = time => {\n  //     if (previousTimeRef.current != undefined) {\n  //       const deltaTime = time - previousTimeRef.current;\n  //       callback(deltaTime)\n  //     }\n  //     previousTimeRef.current = time;\n  //     requestRef.current = requestAnimationFrame(animate);\n  //   }\n  //  useEffect(() => {\n  //     requestRef.current = requestAnimationFrame(animate);\n  //     return () => cancelAnimationFrame(requestRef.current);\n  //   }, []); // Make sure the effect runs only once\n  // }\n  //   const Counter = () => {\n  //   const [count, setCount] = React.useState(0)\n  //   useAnimationFrame(deltaTime => {\n  //     // Pass on a function to the setter of the state\n  //     // to make sure we always have the latest state\n  //     setCount(prevCount => (prevCount + deltaTime * 0.01) % 100)\n  //   })\n  //  console.log(\"count\", count);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: [projection.rotate([count, -24]), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"sphere\",\n      d: path({\n        type: \"Sphere\"\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"graticule\",\n      d: path(graticule()),\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), land.features.map((feature, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"feature\",\n      d: path(feature)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)), geometry.features.map((feature, i) => {\n      var _path$centroid$;\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"interiors\",\n          d: path(feature),\n          id: feature.properties.name\n        }, feature.properties.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), (_path$centroid$ = path.centroid(feature)[0]) !== null && _path$centroid$ !== void 0 ? _path$centroid$ : /*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"interiors\",\n          cx: path.centroid(feature)[0],\n          cy: path.centroid(feature)[1],\n          r: \"2\",\n          fill: \"red\",\n          fontSize: \"36\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Marks, \"2rrgrfJI8jMxw265FDLuUHzWwNI=\");\n\n_c = Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["geoOrthographic","geoPath","geoGraticule","timer","React","useState","useMemo","useEffect","useRef","$","data","Counter","Marks","land","geometry","width","height","rotate","velocity","rotation","setRotation","savedCallback","count","projection","scale","path","graticule","type","display","features","map","feature","i","properties","name","centroid"],"sources":["/Users/barbaramoahamed/Downloads/Globe-main/src/Marks.js"],"sourcesContent":["import { geoOrthographic, geoPath, geoGraticule, timer} from \"d3\";\nimport React, { useState, useMemo, useEffect, useRef } from \"react\";\nimport $, { data } from \"jquery\";\nimport { Counter } from \"./hooks/animation\";\n\nexport const Marks = ({ data: { land, geometry } }) => {\n  \n  const width = 500;\n  const height = 500;\n  // const intialMousePosition = { x: width / 2, y: height / 2 };\n  const rotate = [0, -23.5];\n  const velocity = [0.015, -0];\n  // const [dt, setDT] = useState(Date.now());\n\n \n  const [rotation, setRotation] = useState(0);\n\n\n \n  const savedCallback = useRef();\n\n  const count=Counter();\n\n  const projection = useMemo(() => {\n\n   return geoOrthographic()\n    .scale(300);\n   \n \n  }, []);\n\n  const path = geoPath(projection);\n  const graticule = geoGraticule();\n\n\n  // function useInterval(callback, delay) {\n\n  //   useEffect(() => {\n  //     savedCallback.current = callback;\n  //   }, [callback]);\n    \n  //   // Set up the interval.\n  //   useEffect(() => {\n  //     let id = setInterval(() => {\n  //       savedCallback.current();\n  //     }, delay);\n  //     return () => clearInterval(id);\n  //   }, [delay]);\n    \n  // };\n\n\n\n\n \n \n\n \n  // useInterval(() => {\n  //   setRotation(rotation + 0.2);\n  //   console.log(\"interval\", rotation)\n  // }, 200);\n\n \n\n\n  // const useAnimationFrame = callback => {\n  //   // Use useRef for mutable variables that we want to persist\n  //   // without triggering a re-render on their change\n  //   const requestRef = useRef();\n  //   const previousTimeRef =  useRef();\n    \n  //   const animate = time => {\n  //     if (previousTimeRef.current != undefined) {\n  //       const deltaTime = time - previousTimeRef.current;\n  //       callback(deltaTime)\n  //     }\n  //     previousTimeRef.current = time;\n  //     requestRef.current = requestAnimationFrame(animate);\n  //   }\n    \n  //  useEffect(() => {\n  //     requestRef.current = requestAnimationFrame(animate);\n  //     return () => cancelAnimationFrame(requestRef.current);\n  //   }, []); // Make sure the effect runs only once\n  // }\n  \n  //   const Counter = () => {\n  //   const [count, setCount] = React.useState(0)\n    \n  //   useAnimationFrame(deltaTime => {\n  //     // Pass on a function to the setter of the state\n  //     // to make sure we always have the latest state\n  //     setCount(prevCount => (prevCount + deltaTime * 0.01) % 100)\n  //   })\n      \n  //  console.log(\"count\", count);\n  // }\n  \n\n  return (\n\n    <g\n      className=\"marks\"\n \n    >\n      {projection.rotate([count, -24])}\n      <path className=\"sphere\" d={path({ type: \"Sphere\" })} />\n      <path\n        className=\"graticule\"\n        d={path(graticule())}\n        style={{ display: \"none\" }}\n      />\n\n      {land.features.map((feature, i) => (\n        <path className=\"feature\" d={path(feature)} key={i} />\n      ))}\n\n      {geometry.features.map((feature, i) => (\n        <g>\n          <path\n            className=\"interiors\"\n            d={path(feature)}\n            key={feature.properties.name}\n            id={feature.properties.name}\n          >\n            {/* <div     cx={path.centroid(feature)[0]} cy={path.centroid(feature)[1]}   fontSize=\"36\">{feature.properties.name}</div> */}\n          </path>\n\n          {path.centroid(feature)[0] ?? (\n            <circle\n              className=\"interiors\"\n              key={i}\n              cx={path.centroid(feature)[0]}\n              cy={path.centroid(feature)[1]}\n              r=\"2\"\n              fill=\"red\"\n              fontSize=\"36\"\n            ></circle>\n          )}\n        </g>\n      ))}\n    </g>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}