{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\nimport { feature, mesh } from \"topojson-client\";\nconst jsonUrl = \"https://unpkg.com/world-atlas@2.0.2/countries-50m.json\";\nconst electricityData = \"https://raw.githubusercontent.com/bdlcm/D3/master/WORLD_ATLAS_2.0%20Electric%20power%20consumption%20(kWh%20per%20capita)%20(1).json\";\nconst url = \"https://raw.githubusercontent.com/alexaac/map-challenges/master/points/data/ne_10m_populated_places_simple.geojson\";\nexport const useData = () => {\n  _s();\n\n  // json(mapData, function(data) { console.log(\"mapData\", data); });\n  console.log(\"electricityData\", electricityData);\n  const [data, setData] = useState(null);\n  const [countryData, setCountrydata] = useState(null);\n  useEffect(() => {\n    json(url).then(topojsonData => {\n      console.log(\"pop data\", topojsonData);\n    });\n  }, []);\n  useEffect(() => {\n    json(electricityData).then(topojsonData => {\n      setCountrydata(topojsonData.data.filter(country => country[\"Year\"] === 2014)); // console.log(\"countryData\", topojsonData.data);\n    });\n  }, []);\n  useEffect(() => {\n    json(jsonUrl).then(topojsonData => {\n      const {\n        countries,\n        land\n      } = topojsonData.objects;\n      setData({\n        land: feature(topojsonData, land),\n        interiors: mesh(topojsonData, countries, (a, b) => a !== b),\n        geometry: feature(topojsonData, topojsonData.objects.countries)\n      });\n    });\n  }, []);\n  return {\n    data,\n    countryData\n  };\n};\n\n_s(useData, \"HGOccm7Xm/tUrywBMBIQy6RvtjU=\");","map":{"version":3,"names":["useState","useEffect","json","feature","mesh","jsonUrl","electricityData","url","useData","console","log","data","setData","countryData","setCountrydata","then","topojsonData","filter","country","countries","land","objects","interiors","a","b","geometry"],"sources":["/Users/barbaramoahamed/Documents/repos/Globe-main/src/useData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\nimport { feature, mesh } from \"topojson-client\";\n\nconst jsonUrl = \"https://unpkg.com/world-atlas@2.0.2/countries-50m.json\";\nconst electricityData =\n  \"https://raw.githubusercontent.com/bdlcm/D3/master/WORLD_ATLAS_2.0%20Electric%20power%20consumption%20(kWh%20per%20capita)%20(1).json\";\n\n  const url = \"https://raw.githubusercontent.com/alexaac/map-challenges/master/points/data/ne_10m_populated_places_simple.geojson\";\nexport const useData = () => {\n  // json(mapData, function(data) { console.log(\"mapData\", data); });\n  console.log(\"electricityData\", electricityData);\n  const [data, setData] = useState(null);\n  const [countryData, setCountrydata] = useState(null);\n\n  useEffect(() => {\n    json(url).then((topojsonData) => {\n     \n\n       console.log(\"pop data\", topojsonData);\n    });\n  }, []);\n\n  useEffect(() => {\n    json(electricityData).then((topojsonData) => {\n      setCountrydata(\n        topojsonData.data.filter((country) => country[\"Year\"] === 2014)\n      );\n\n      // console.log(\"countryData\", topojsonData.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    json(jsonUrl).then((topojsonData) => {\n      const { countries, land } = topojsonData.objects;\n\n      setData({\n        land: feature(topojsonData, land),\n        interiors: mesh(topojsonData, countries, (a, b) => a !== b),\n        geometry: feature(topojsonData, topojsonData.objects.countries),\n      });\n    });\n  }, []);\n\n  return { data, countryData };\n};\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,iBAA9B;AAEA,MAAMC,OAAO,GAAG,wDAAhB;AACA,MAAMC,eAAe,GACnB,sIADF;AAGE,MAAMC,GAAG,GAAG,oHAAZ;AACF,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAC3B;EACAC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,eAA/B;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,IAAD,CAA9C;EAEAC,SAAS,CAAC,MAAM;IACdC,IAAI,CAACK,GAAD,CAAJ,CAAUQ,IAAV,CAAgBC,YAAD,IAAkB;MAG9BP,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBM,YAAxB;IACF,CAJD;EAKD,CANQ,EAMN,EANM,CAAT;EAQAf,SAAS,CAAC,MAAM;IACdC,IAAI,CAACI,eAAD,CAAJ,CAAsBS,IAAtB,CAA4BC,YAAD,IAAkB;MAC3CF,cAAc,CACZE,YAAY,CAACL,IAAb,CAAkBM,MAAlB,CAA0BC,OAAD,IAAaA,OAAO,CAAC,MAAD,CAAP,KAAoB,IAA1D,CADY,CAAd,CAD2C,CAK3C;IACD,CAND;EAOD,CARQ,EAQN,EARM,CAAT;EAUAjB,SAAS,CAAC,MAAM;IACdC,IAAI,CAACG,OAAD,CAAJ,CAAcU,IAAd,CAAoBC,YAAD,IAAkB;MACnC,MAAM;QAAEG,SAAF;QAAaC;MAAb,IAAsBJ,YAAY,CAACK,OAAzC;MAEAT,OAAO,CAAC;QACNQ,IAAI,EAAEjB,OAAO,CAACa,YAAD,EAAeI,IAAf,CADP;QAENE,SAAS,EAAElB,IAAI,CAACY,YAAD,EAAeG,SAAf,EAA0B,CAACI,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CAA1C,CAFT;QAGNC,QAAQ,EAAEtB,OAAO,CAACa,YAAD,EAAeA,YAAY,CAACK,OAAb,CAAqBF,SAApC;MAHX,CAAD,CAAP;IAKD,CARD;EASD,CAVQ,EAUN,EAVM,CAAT;EAYA,OAAO;IAAER,IAAF;IAAQE;EAAR,CAAP;AACD,CArCM;;GAAML,O"},"metadata":{},"sourceType":"module"}