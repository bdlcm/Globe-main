{"ast":null,"code":"var _jsxFileName = \"/Users/barbaramoahamed/Downloads/Globe-main/src/Globe.js\",\n    _s2 = $RefreshSig$();\n\nimport { geoOrthographic, geoPath, geoGraticule, timer } from \"d3\";\nimport React, { useState, useMemo, useEffect, useRef } from \"react\";\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Globe = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const savedCallback = useRef();\n  const [rotation, setRotation] = useState(0);\n  const [data, setData] = useState(null);\n  const url = \"https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson\";\n  let projection = geoOrthographic().fitSize([400, 400], this.props.geoJson).rotate([this.state.rotation]);\n  let geoGenerator = geoPath().projection(projection);\n  let pathString = geoGenerator(data);\n  window.requestAnimationFrame(() => {\n    this.setState({\n      rotation: this.state.rotation + 0.2\n    });\n  });\n\n  function useInterval(callback, delay) {\n    _s();\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]); // Set up the interval.\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n  }\n\n  _s(useInterval, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n  ;\n  useEffect(() => {\n    json(url).then(topojsonData => {\n      let geoJson = feature(topojsonData, topojsonData.objects.ne_110m_admin_0_countries);\n      setData(geoJson);\n    });\n  }, []);\n  useInterval(() => {\n    setRotation(rotation + 0.2);\n    console.log(\"interval\", rotation);\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: 400,\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(\"path\", {\n      d: pathString\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Globe, \"aIkGlwnmAId3zDKzR+7HXlfn4hs=\", true);\n\n_c = Globe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["geoOrthographic","geoPath","geoGraticule","timer","React","useState","useMemo","useEffect","useRef","json","feature","mesh","Globe","savedCallback","rotation","setRotation","data","setData","url","projection","fitSize","props","geoJson","rotate","state","geoGenerator","pathString","window","requestAnimationFrame","setState","useInterval","callback","delay","current","id","setInterval","clearInterval","then","topojsonData","objects","ne_110m_admin_0_countries","console","log"],"sources":["/Users/barbaramoahamed/Downloads/Globe-main/src/Globe.js"],"sourcesContent":["import { geoOrthographic, geoPath, geoGraticule, timer} from \"d3\";\nimport React, { useState, useMemo, useEffect, useRef } from \"react\";\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\n\nexport const Globe = () => {\n     const savedCallback = useRef();\n    const [rotation, setRotation] = useState(0);\n    const [data, setData] = useState(null);\n    const url = \"https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson\";\n  \n\n\n    let projection = geoOrthographic()\n    .fitSize([400, 400], this.props.geoJson)\n    .rotate([this.state.rotation])\n  \n  let geoGenerator = geoPath()\n    .projection(projection)\n  \n  let pathString = geoGenerator(data)\n\n  window.requestAnimationFrame(() => {\n    this.setState({\n      rotation: this.state.rotation + 0.2\n    })\n  })\n\n    function useInterval(callback, delay) {\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n    \n    // Set up the interval.\n    useEffect(() => {\n      let id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n    \n  };\n\n\n \n\n\n  useEffect(() => {\n\n \n\n\n     json(url).then(topojsonData => {\n        let geoJson = feature(topojsonData, topojsonData.objects.ne_110m_admin_0_countries) \n  \n \n       setData(geoJson\n      )\n    });\n\n \n  }, []);\n\n\n \n \n\n \n  useInterval(() => {\n    setRotation(rotation + 0.2);\n    console.log(\"interval\", rotation)\n  }, 200);\n \n\n  return (\n\n    <svg width={400} height={400} >\n    <path d={pathString} />\n  </svg>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,YAAnC,EAAiDC,KAAjD,QAA6D,IAA7D;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,MAA9C,QAA4D,OAA5D;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,iBAA9B;;AAGA,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAAA;;EACtB,MAAMC,aAAa,GAAGL,MAAM,EAA5B;EACD,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;EACA,MAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAMa,GAAG,GAAG,iHAAZ;EAIA,IAAIC,UAAU,GAAGnB,eAAe,GAC/BoB,OADgB,CACR,CAAC,GAAD,EAAM,GAAN,CADQ,EACI,KAAKC,KAAL,CAAWC,OADf,EAEhBC,MAFgB,CAET,CAAC,KAAKC,KAAL,CAAWV,QAAZ,CAFS,CAAjB;EAIF,IAAIW,YAAY,GAAGxB,OAAO,GACvBkB,UADgB,CACLA,UADK,CAAnB;EAGA,IAAIO,UAAU,GAAGD,YAAY,CAACT,IAAD,CAA7B;EAEAW,MAAM,CAACC,qBAAP,CAA6B,MAAM;IACjC,KAAKC,QAAL,CAAc;MACZf,QAAQ,EAAE,KAAKU,KAAL,CAAWV,QAAX,GAAsB;IADpB,CAAd;EAGD,CAJD;;EAME,SAASgB,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;IAAA;;IAEtCzB,SAAS,CAAC,MAAM;MACdM,aAAa,CAACoB,OAAd,GAAwBF,QAAxB;IACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAFsC,CAMtC;;IACAxB,SAAS,CAAC,MAAM;MACd,IAAI2B,EAAE,GAAGC,WAAW,CAAC,MAAM;QACzBtB,aAAa,CAACoB,OAAd;MACD,CAFmB,EAEjBD,KAFiB,CAApB;MAGA,OAAO,MAAMI,aAAa,CAACF,EAAD,CAA1B;IACD,CALQ,EAKN,CAACF,KAAD,CALM,CAAT;EAOD;;EArCwB,GAuBdF,WAvBc;;EAqCxB;EAMDvB,SAAS,CAAC,MAAM;IAKbE,IAAI,CAACS,GAAD,CAAJ,CAAUmB,IAAV,CAAeC,YAAY,IAAI;MAC5B,IAAIhB,OAAO,GAAGZ,OAAO,CAAC4B,YAAD,EAAeA,YAAY,CAACC,OAAb,CAAqBC,yBAApC,CAArB;MAGDvB,OAAO,CAACK,OAAD,CAAP;IAEF,CANA;EASF,CAdQ,EAcN,EAdM,CAAT;EAqBAQ,WAAW,CAAC,MAAM;IAChBf,WAAW,CAACD,QAAQ,GAAG,GAAZ,CAAX;IACA2B,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB5B,QAAxB;EACD,CAHU,EAGR,GAHQ,CAAX;EAMA,oBAEE;IAAK,KAAK,EAAE,GAAZ;IAAiB,MAAM,EAAE,GAAzB;IAAA,uBACA;MAAM,CAAC,EAAEY;IAAT;MAAA;MAAA;MAAA;IAAA;EADA;IAAA;IAAA;IAAA;EAAA,QAFF;AAMD,CA5EM;;IAAMd,K;;KAAAA,K"},"metadata":{},"sourceType":"module"}